// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	entities "github.com/ijufumi/google-vision-sample/internal/models/entities"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// InputFileRepository is an autogenerated mock type for the InputFileRepository type
type InputFileRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: db, entity
func (_m *InputFileRepository) Create(db *gorm.DB, entity ...*entities.InputFile) error {
	_va := make([]interface{}, len(entity))
	for _i := range entity {
		_va[_i] = entity[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, db)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...*entities.InputFile) error); ok {
		r0 = rf(db, entity...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByJobID provides a mock function with given fields: db, jobID
func (_m *InputFileRepository) DeleteByJobID(db *gorm.DB, jobID string) error {
	ret := _m.Called(db, jobID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(db, jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: db, iD
func (_m *InputFileRepository) GetByID(db *gorm.DB, iD string) (*entities.InputFile, error) {
	ret := _m.Called(db, iD)

	var r0 *entities.InputFile
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) (*entities.InputFile, error)); ok {
		return rf(db, iD)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) *entities.InputFile); ok {
		r0 = rf(db, iD)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.InputFile)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(db, iD)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByJobID provides a mock function with given fields: db, jobID
func (_m *InputFileRepository) GetByJobID(db *gorm.DB, jobID string) ([]*entities.InputFile, error) {
	ret := _m.Called(db, jobID)

	var r0 []*entities.InputFile
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) ([]*entities.InputFile, error)); ok {
		return rf(db, jobID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) []*entities.InputFile); ok {
		r0 = rf(db, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.InputFile)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(db, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: db, entity
func (_m *InputFileRepository) Update(db *gorm.DB, entity *entities.InputFile) error {
	ret := _m.Called(db, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *entities.InputFile) error); ok {
		r0 = rf(db, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewInputFileRepository creates a new instance of InputFileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInputFileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *InputFileRepository {
	mock := &InputFileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
