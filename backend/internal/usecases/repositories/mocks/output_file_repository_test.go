// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	entities "github.com/ijufumi/google-vision-sample/internal/models/entities"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// OutputFileRepository is an autogenerated mock type for the OutputFileRepository type
type OutputFileRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: db, entity
func (_m *OutputFileRepository) Create(db *gorm.DB, entity ...*entities.OutputFile) error {
	_va := make([]interface{}, len(entity))
	for _i := range entity {
		_va[_i] = entity[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, db)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...*entities.OutputFile) error); ok {
		r0 = rf(db, entity...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByInputFileID provides a mock function with given fields: db, inputFileID
func (_m *OutputFileRepository) DeleteByInputFileID(db *gorm.DB, inputFileID string) error {
	ret := _m.Called(db, inputFileID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(db, inputFileID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByJobID provides a mock function with given fields: db, jobID
func (_m *OutputFileRepository) DeleteByJobID(db *gorm.DB, jobID string) error {
	ret := _m.Called(db, jobID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(db, jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByJobID provides a mock function with given fields: db, jobID
func (_m *OutputFileRepository) GetByJobID(db *gorm.DB, jobID string) ([]*entities.OutputFile, error) {
	ret := _m.Called(db, jobID)

	var r0 []*entities.OutputFile
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) ([]*entities.OutputFile, error)); ok {
		return rf(db, jobID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) []*entities.OutputFile); ok {
		r0 = rf(db, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OutputFile)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(db, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOutputFileRepository creates a new instance of OutputFileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOutputFileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OutputFileRepository {
	mock := &OutputFileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
