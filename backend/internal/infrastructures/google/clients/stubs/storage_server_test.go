// Code generated by mockery. DO NOT EDIT.

package stubs

import (
	context "context"

	iampb "cloud.google.com/go/iam/apiv1/iampb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	storagepb "cloud.google.com/go/storage/internal/apiv2/storagepb"
)

// StorageServer is an autogenerated mock type for the StorageServer type
type StorageServer struct {
	mock.Mock
}

// CancelResumableWrite provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) CancelResumableWrite(_a0 context.Context, _a1 *storagepb.CancelResumableWriteRequest) (*storagepb.CancelResumableWriteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.CancelResumableWriteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.CancelResumableWriteRequest) (*storagepb.CancelResumableWriteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.CancelResumableWriteRequest) *storagepb.CancelResumableWriteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.CancelResumableWriteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.CancelResumableWriteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComposeObject provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) ComposeObject(_a0 context.Context, _a1 *storagepb.ComposeObjectRequest) (*storagepb.Object, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ComposeObjectRequest) (*storagepb.Object, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ComposeObjectRequest) *storagepb.Object); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.ComposeObjectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBucket provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) CreateBucket(_a0 context.Context, _a1 *storagepb.CreateBucketRequest) (*storagepb.Bucket, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.Bucket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.CreateBucketRequest) (*storagepb.Bucket, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.CreateBucketRequest) *storagepb.Bucket); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.Bucket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.CreateBucketRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHmacKey provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) CreateHmacKey(_a0 context.Context, _a1 *storagepb.CreateHmacKeyRequest) (*storagepb.CreateHmacKeyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.CreateHmacKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.CreateHmacKeyRequest) (*storagepb.CreateHmacKeyResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.CreateHmacKeyRequest) *storagepb.CreateHmacKeyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.CreateHmacKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.CreateHmacKeyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNotificationConfig provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) CreateNotificationConfig(_a0 context.Context, _a1 *storagepb.CreateNotificationConfigRequest) (*storagepb.NotificationConfig, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.NotificationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.CreateNotificationConfigRequest) (*storagepb.NotificationConfig, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.CreateNotificationConfigRequest) *storagepb.NotificationConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.NotificationConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.CreateNotificationConfigRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucket provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) DeleteBucket(_a0 context.Context, _a1 *storagepb.DeleteBucketRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.DeleteBucketRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.DeleteBucketRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.DeleteBucketRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHmacKey provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) DeleteHmacKey(_a0 context.Context, _a1 *storagepb.DeleteHmacKeyRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.DeleteHmacKeyRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.DeleteHmacKeyRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.DeleteHmacKeyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNotificationConfig provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) DeleteNotificationConfig(_a0 context.Context, _a1 *storagepb.DeleteNotificationConfigRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.DeleteNotificationConfigRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.DeleteNotificationConfigRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.DeleteNotificationConfigRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteObject provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) DeleteObject(_a0 context.Context, _a1 *storagepb.DeleteObjectRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.DeleteObjectRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.DeleteObjectRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.DeleteObjectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucket provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) GetBucket(_a0 context.Context, _a1 *storagepb.GetBucketRequest) (*storagepb.Bucket, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.Bucket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetBucketRequest) (*storagepb.Bucket, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetBucketRequest) *storagepb.Bucket); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.Bucket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.GetBucketRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHmacKey provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) GetHmacKey(_a0 context.Context, _a1 *storagepb.GetHmacKeyRequest) (*storagepb.HmacKeyMetadata, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.HmacKeyMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetHmacKeyRequest) (*storagepb.HmacKeyMetadata, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetHmacKeyRequest) *storagepb.HmacKeyMetadata); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.HmacKeyMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.GetHmacKeyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIamPolicy provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) GetIamPolicy(_a0 context.Context, _a1 *iampb.GetIamPolicyRequest) (*iampb.Policy, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *iampb.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iampb.GetIamPolicyRequest) (*iampb.Policy, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iampb.GetIamPolicyRequest) *iampb.Policy); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iampb.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iampb.GetIamPolicyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationConfig provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) GetNotificationConfig(_a0 context.Context, _a1 *storagepb.GetNotificationConfigRequest) (*storagepb.NotificationConfig, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.NotificationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetNotificationConfigRequest) (*storagepb.NotificationConfig, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetNotificationConfigRequest) *storagepb.NotificationConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.NotificationConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.GetNotificationConfigRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObject provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) GetObject(_a0 context.Context, _a1 *storagepb.GetObjectRequest) (*storagepb.Object, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetObjectRequest) (*storagepb.Object, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetObjectRequest) *storagepb.Object); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.GetObjectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceAccount provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) GetServiceAccount(_a0 context.Context, _a1 *storagepb.GetServiceAccountRequest) (*storagepb.ServiceAccount, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetServiceAccountRequest) (*storagepb.ServiceAccount, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetServiceAccountRequest) *storagepb.ServiceAccount); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.GetServiceAccountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuckets provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) ListBuckets(_a0 context.Context, _a1 *storagepb.ListBucketsRequest) (*storagepb.ListBucketsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.ListBucketsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ListBucketsRequest) (*storagepb.ListBucketsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ListBucketsRequest) *storagepb.ListBucketsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.ListBucketsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.ListBucketsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHmacKeys provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) ListHmacKeys(_a0 context.Context, _a1 *storagepb.ListHmacKeysRequest) (*storagepb.ListHmacKeysResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.ListHmacKeysResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ListHmacKeysRequest) (*storagepb.ListHmacKeysResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ListHmacKeysRequest) *storagepb.ListHmacKeysResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.ListHmacKeysResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.ListHmacKeysRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotificationConfigs provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) ListNotificationConfigs(_a0 context.Context, _a1 *storagepb.ListNotificationConfigsRequest) (*storagepb.ListNotificationConfigsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.ListNotificationConfigsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ListNotificationConfigsRequest) (*storagepb.ListNotificationConfigsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ListNotificationConfigsRequest) *storagepb.ListNotificationConfigsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.ListNotificationConfigsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.ListNotificationConfigsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjects provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) ListObjects(_a0 context.Context, _a1 *storagepb.ListObjectsRequest) (*storagepb.ListObjectsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.ListObjectsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ListObjectsRequest) (*storagepb.ListObjectsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ListObjectsRequest) *storagepb.ListObjectsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.ListObjectsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.ListObjectsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockBucketRetentionPolicy provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) LockBucketRetentionPolicy(_a0 context.Context, _a1 *storagepb.LockBucketRetentionPolicyRequest) (*storagepb.Bucket, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.Bucket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.LockBucketRetentionPolicyRequest) (*storagepb.Bucket, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.LockBucketRetentionPolicyRequest) *storagepb.Bucket); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.Bucket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.LockBucketRetentionPolicyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryWriteStatus provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) QueryWriteStatus(_a0 context.Context, _a1 *storagepb.QueryWriteStatusRequest) (*storagepb.QueryWriteStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.QueryWriteStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.QueryWriteStatusRequest) (*storagepb.QueryWriteStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.QueryWriteStatusRequest) *storagepb.QueryWriteStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.QueryWriteStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.QueryWriteStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadObject provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) ReadObject(_a0 *storagepb.ReadObjectRequest, _a1 storagepb.Storage_ReadObjectServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*storagepb.ReadObjectRequest, storagepb.Storage_ReadObjectServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RewriteObject provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) RewriteObject(_a0 context.Context, _a1 *storagepb.RewriteObjectRequest) (*storagepb.RewriteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.RewriteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.RewriteObjectRequest) (*storagepb.RewriteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.RewriteObjectRequest) *storagepb.RewriteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.RewriteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.RewriteObjectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetIamPolicy provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) SetIamPolicy(_a0 context.Context, _a1 *iampb.SetIamPolicyRequest) (*iampb.Policy, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *iampb.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iampb.SetIamPolicyRequest) (*iampb.Policy, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iampb.SetIamPolicyRequest) *iampb.Policy); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iampb.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iampb.SetIamPolicyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartResumableWrite provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) StartResumableWrite(_a0 context.Context, _a1 *storagepb.StartResumableWriteRequest) (*storagepb.StartResumableWriteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.StartResumableWriteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.StartResumableWriteRequest) (*storagepb.StartResumableWriteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.StartResumableWriteRequest) *storagepb.StartResumableWriteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.StartResumableWriteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.StartResumableWriteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestIamPermissions provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) TestIamPermissions(_a0 context.Context, _a1 *iampb.TestIamPermissionsRequest) (*iampb.TestIamPermissionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *iampb.TestIamPermissionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iampb.TestIamPermissionsRequest) (*iampb.TestIamPermissionsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iampb.TestIamPermissionsRequest) *iampb.TestIamPermissionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iampb.TestIamPermissionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iampb.TestIamPermissionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBucket provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) UpdateBucket(_a0 context.Context, _a1 *storagepb.UpdateBucketRequest) (*storagepb.Bucket, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.Bucket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.UpdateBucketRequest) (*storagepb.Bucket, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.UpdateBucketRequest) *storagepb.Bucket); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.Bucket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.UpdateBucketRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHmacKey provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) UpdateHmacKey(_a0 context.Context, _a1 *storagepb.UpdateHmacKeyRequest) (*storagepb.HmacKeyMetadata, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.HmacKeyMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.UpdateHmacKeyRequest) (*storagepb.HmacKeyMetadata, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.UpdateHmacKeyRequest) *storagepb.HmacKeyMetadata); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.HmacKeyMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.UpdateHmacKeyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateObject provides a mock function with given fields: _a0, _a1
func (_m *StorageServer) UpdateObject(_a0 context.Context, _a1 *storagepb.UpdateObjectRequest) (*storagepb.Object, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storagepb.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.UpdateObjectRequest) (*storagepb.Object, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.UpdateObjectRequest) *storagepb.Object); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.UpdateObjectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteObject provides a mock function with given fields: _a0
func (_m *StorageServer) WriteObject(_a0 storagepb.Storage_WriteObjectServer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(storagepb.Storage_WriteObjectServer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorageServer creates a new instance of StorageServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageServer {
	mock := &StorageServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
