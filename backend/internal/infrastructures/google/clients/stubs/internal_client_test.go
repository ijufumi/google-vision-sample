// Code generated by mockery. DO NOT EDIT.

package stubs

import (
	context "context"

	gax "github.com/googleapis/gax-go/v2"
	grpc "google.golang.org/grpc"

	iampb "cloud.google.com/go/iam/apiv1/iampb"

	mock "github.com/stretchr/testify/mock"

	storage "cloud.google.com/go/storage/internal/apiv2"

	storagepb "cloud.google.com/go/storage/internal/apiv2/storagepb"
)

// internalClient is an autogenerated mock type for the internalClient type
type internalClient struct {
	mock.Mock
}

// CancelResumableWrite provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) CancelResumableWrite(_a0 context.Context, _a1 *storagepb.CancelResumableWriteRequest, _a2 ...gax.CallOption) (*storagepb.CancelResumableWriteResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.CancelResumableWriteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.CancelResumableWriteRequest, ...gax.CallOption) (*storagepb.CancelResumableWriteResponse, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.CancelResumableWriteRequest, ...gax.CallOption) *storagepb.CancelResumableWriteResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.CancelResumableWriteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.CancelResumableWriteRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *internalClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ComposeObject provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) ComposeObject(_a0 context.Context, _a1 *storagepb.ComposeObjectRequest, _a2 ...gax.CallOption) (*storagepb.Object, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ComposeObjectRequest, ...gax.CallOption) (*storagepb.Object, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ComposeObjectRequest, ...gax.CallOption) *storagepb.Object); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.ComposeObjectRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connection provides a mock function with given fields:
func (_m *internalClient) Connection() *grpc.ClientConn {
	ret := _m.Called()

	var r0 *grpc.ClientConn
	if rf, ok := ret.Get(0).(func() *grpc.ClientConn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ClientConn)
		}
	}

	return r0
}

// CreateBucket provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) CreateBucket(_a0 context.Context, _a1 *storagepb.CreateBucketRequest, _a2 ...gax.CallOption) (*storagepb.Bucket, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.Bucket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.CreateBucketRequest, ...gax.CallOption) (*storagepb.Bucket, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.CreateBucketRequest, ...gax.CallOption) *storagepb.Bucket); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.Bucket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.CreateBucketRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHmacKey provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) CreateHmacKey(_a0 context.Context, _a1 *storagepb.CreateHmacKeyRequest, _a2 ...gax.CallOption) (*storagepb.CreateHmacKeyResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.CreateHmacKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.CreateHmacKeyRequest, ...gax.CallOption) (*storagepb.CreateHmacKeyResponse, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.CreateHmacKeyRequest, ...gax.CallOption) *storagepb.CreateHmacKeyResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.CreateHmacKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.CreateHmacKeyRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNotificationConfig provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) CreateNotificationConfig(_a0 context.Context, _a1 *storagepb.CreateNotificationConfigRequest, _a2 ...gax.CallOption) (*storagepb.NotificationConfig, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.NotificationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.CreateNotificationConfigRequest, ...gax.CallOption) (*storagepb.NotificationConfig, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.CreateNotificationConfigRequest, ...gax.CallOption) *storagepb.NotificationConfig); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.NotificationConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.CreateNotificationConfigRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucket provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) DeleteBucket(_a0 context.Context, _a1 *storagepb.DeleteBucketRequest, _a2 ...gax.CallOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.DeleteBucketRequest, ...gax.CallOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteHmacKey provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) DeleteHmacKey(_a0 context.Context, _a1 *storagepb.DeleteHmacKeyRequest, _a2 ...gax.CallOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.DeleteHmacKeyRequest, ...gax.CallOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNotificationConfig provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) DeleteNotificationConfig(_a0 context.Context, _a1 *storagepb.DeleteNotificationConfigRequest, _a2 ...gax.CallOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.DeleteNotificationConfigRequest, ...gax.CallOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteObject provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) DeleteObject(_a0 context.Context, _a1 *storagepb.DeleteObjectRequest, _a2 ...gax.CallOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.DeleteObjectRequest, ...gax.CallOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBucket provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) GetBucket(_a0 context.Context, _a1 *storagepb.GetBucketRequest, _a2 ...gax.CallOption) (*storagepb.Bucket, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.Bucket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetBucketRequest, ...gax.CallOption) (*storagepb.Bucket, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetBucketRequest, ...gax.CallOption) *storagepb.Bucket); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.Bucket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.GetBucketRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHmacKey provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) GetHmacKey(_a0 context.Context, _a1 *storagepb.GetHmacKeyRequest, _a2 ...gax.CallOption) (*storagepb.HmacKeyMetadata, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.HmacKeyMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetHmacKeyRequest, ...gax.CallOption) (*storagepb.HmacKeyMetadata, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetHmacKeyRequest, ...gax.CallOption) *storagepb.HmacKeyMetadata); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.HmacKeyMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.GetHmacKeyRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIamPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) GetIamPolicy(_a0 context.Context, _a1 *iampb.GetIamPolicyRequest, _a2 ...gax.CallOption) (*iampb.Policy, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iampb.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iampb.GetIamPolicyRequest, ...gax.CallOption) (*iampb.Policy, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iampb.GetIamPolicyRequest, ...gax.CallOption) *iampb.Policy); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iampb.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iampb.GetIamPolicyRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationConfig provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) GetNotificationConfig(_a0 context.Context, _a1 *storagepb.GetNotificationConfigRequest, _a2 ...gax.CallOption) (*storagepb.NotificationConfig, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.NotificationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetNotificationConfigRequest, ...gax.CallOption) (*storagepb.NotificationConfig, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetNotificationConfigRequest, ...gax.CallOption) *storagepb.NotificationConfig); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.NotificationConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.GetNotificationConfigRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObject provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) GetObject(_a0 context.Context, _a1 *storagepb.GetObjectRequest, _a2 ...gax.CallOption) (*storagepb.Object, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetObjectRequest, ...gax.CallOption) (*storagepb.Object, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetObjectRequest, ...gax.CallOption) *storagepb.Object); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.GetObjectRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceAccount provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) GetServiceAccount(_a0 context.Context, _a1 *storagepb.GetServiceAccountRequest, _a2 ...gax.CallOption) (*storagepb.ServiceAccount, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetServiceAccountRequest, ...gax.CallOption) (*storagepb.ServiceAccount, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.GetServiceAccountRequest, ...gax.CallOption) *storagepb.ServiceAccount); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.GetServiceAccountRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuckets provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) ListBuckets(_a0 context.Context, _a1 *storagepb.ListBucketsRequest, _a2 ...gax.CallOption) *storage.BucketIterator {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storage.BucketIterator
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ListBucketsRequest, ...gax.CallOption) *storage.BucketIterator); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.BucketIterator)
		}
	}

	return r0
}

// ListHmacKeys provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) ListHmacKeys(_a0 context.Context, _a1 *storagepb.ListHmacKeysRequest, _a2 ...gax.CallOption) *storage.HmacKeyMetadataIterator {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storage.HmacKeyMetadataIterator
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ListHmacKeysRequest, ...gax.CallOption) *storage.HmacKeyMetadataIterator); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.HmacKeyMetadataIterator)
		}
	}

	return r0
}

// ListNotificationConfigs provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) ListNotificationConfigs(_a0 context.Context, _a1 *storagepb.ListNotificationConfigsRequest, _a2 ...gax.CallOption) *storage.NotificationConfigIterator {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storage.NotificationConfigIterator
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ListNotificationConfigsRequest, ...gax.CallOption) *storage.NotificationConfigIterator); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.NotificationConfigIterator)
		}
	}

	return r0
}

// ListObjects provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) ListObjects(_a0 context.Context, _a1 *storagepb.ListObjectsRequest, _a2 ...gax.CallOption) *storage.ObjectIterator {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storage.ObjectIterator
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ListObjectsRequest, ...gax.CallOption) *storage.ObjectIterator); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ObjectIterator)
		}
	}

	return r0
}

// LockBucketRetentionPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) LockBucketRetentionPolicy(_a0 context.Context, _a1 *storagepb.LockBucketRetentionPolicyRequest, _a2 ...gax.CallOption) (*storagepb.Bucket, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.Bucket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.LockBucketRetentionPolicyRequest, ...gax.CallOption) (*storagepb.Bucket, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.LockBucketRetentionPolicyRequest, ...gax.CallOption) *storagepb.Bucket); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.Bucket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.LockBucketRetentionPolicyRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryWriteStatus provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) QueryWriteStatus(_a0 context.Context, _a1 *storagepb.QueryWriteStatusRequest, _a2 ...gax.CallOption) (*storagepb.QueryWriteStatusResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.QueryWriteStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.QueryWriteStatusRequest, ...gax.CallOption) (*storagepb.QueryWriteStatusResponse, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.QueryWriteStatusRequest, ...gax.CallOption) *storagepb.QueryWriteStatusResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.QueryWriteStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.QueryWriteStatusRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadObject provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) ReadObject(_a0 context.Context, _a1 *storagepb.ReadObjectRequest, _a2 ...gax.CallOption) (storagepb.Storage_ReadObjectClient, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 storagepb.Storage_ReadObjectClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ReadObjectRequest, ...gax.CallOption) (storagepb.Storage_ReadObjectClient, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.ReadObjectRequest, ...gax.CallOption) storagepb.Storage_ReadObjectClient); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storagepb.Storage_ReadObjectClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.ReadObjectRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RewriteObject provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) RewriteObject(_a0 context.Context, _a1 *storagepb.RewriteObjectRequest, _a2 ...gax.CallOption) (*storagepb.RewriteResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.RewriteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.RewriteObjectRequest, ...gax.CallOption) (*storagepb.RewriteResponse, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.RewriteObjectRequest, ...gax.CallOption) *storagepb.RewriteResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.RewriteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.RewriteObjectRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetIamPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) SetIamPolicy(_a0 context.Context, _a1 *iampb.SetIamPolicyRequest, _a2 ...gax.CallOption) (*iampb.Policy, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iampb.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iampb.SetIamPolicyRequest, ...gax.CallOption) (*iampb.Policy, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iampb.SetIamPolicyRequest, ...gax.CallOption) *iampb.Policy); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iampb.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iampb.SetIamPolicyRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartResumableWrite provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) StartResumableWrite(_a0 context.Context, _a1 *storagepb.StartResumableWriteRequest, _a2 ...gax.CallOption) (*storagepb.StartResumableWriteResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.StartResumableWriteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.StartResumableWriteRequest, ...gax.CallOption) (*storagepb.StartResumableWriteResponse, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.StartResumableWriteRequest, ...gax.CallOption) *storagepb.StartResumableWriteResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.StartResumableWriteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.StartResumableWriteRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestIamPermissions provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) TestIamPermissions(_a0 context.Context, _a1 *iampb.TestIamPermissionsRequest, _a2 ...gax.CallOption) (*iampb.TestIamPermissionsResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iampb.TestIamPermissionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iampb.TestIamPermissionsRequest, ...gax.CallOption) (*iampb.TestIamPermissionsResponse, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iampb.TestIamPermissionsRequest, ...gax.CallOption) *iampb.TestIamPermissionsResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iampb.TestIamPermissionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iampb.TestIamPermissionsRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBucket provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) UpdateBucket(_a0 context.Context, _a1 *storagepb.UpdateBucketRequest, _a2 ...gax.CallOption) (*storagepb.Bucket, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.Bucket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.UpdateBucketRequest, ...gax.CallOption) (*storagepb.Bucket, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.UpdateBucketRequest, ...gax.CallOption) *storagepb.Bucket); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.Bucket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.UpdateBucketRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHmacKey provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) UpdateHmacKey(_a0 context.Context, _a1 *storagepb.UpdateHmacKeyRequest, _a2 ...gax.CallOption) (*storagepb.HmacKeyMetadata, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.HmacKeyMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.UpdateHmacKeyRequest, ...gax.CallOption) (*storagepb.HmacKeyMetadata, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.UpdateHmacKeyRequest, ...gax.CallOption) *storagepb.HmacKeyMetadata); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.HmacKeyMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.UpdateHmacKeyRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateObject provides a mock function with given fields: _a0, _a1, _a2
func (_m *internalClient) UpdateObject(_a0 context.Context, _a1 *storagepb.UpdateObjectRequest, _a2 ...gax.CallOption) (*storagepb.Object, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagepb.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.UpdateObjectRequest, ...gax.CallOption) (*storagepb.Object, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagepb.UpdateObjectRequest, ...gax.CallOption) *storagepb.Object); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagepb.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagepb.UpdateObjectRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteObject provides a mock function with given fields: _a0, _a1
func (_m *internalClient) WriteObject(_a0 context.Context, _a1 ...gax.CallOption) (storagepb.Storage_WriteObjectClient, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 storagepb.Storage_WriteObjectClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...gax.CallOption) (storagepb.Storage_WriteObjectClient, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...gax.CallOption) storagepb.Storage_WriteObjectClient); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storagepb.Storage_WriteObjectClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// setGoogleClientInfo provides a mock function with given fields: _a0
func (_m *internalClient) setGoogleClientInfo(_a0 ...string) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// newInternalClient creates a new instance of internalClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newInternalClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *internalClient {
	mock := &internalClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
