// Code generated by mockery. DO NOT EDIT.

package stubs

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	option "google.golang.org/api/option"
)

// clientHook is an autogenerated mock type for the clientHook type
type clientHook struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *clientHook) Execute(_a0 context.Context, _a1 storage.clientHookParams) ([]option.ClientOption, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []option.ClientOption
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.clientHookParams) ([]option.ClientOption, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.clientHookParams) []option.ClientOption); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]option.ClientOption)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.clientHookParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newClientHook creates a new instance of clientHook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newClientHook(t interface {
	mock.TestingT
	Cleanup(func())
}) *clientHook {
	mock := &clientHook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
